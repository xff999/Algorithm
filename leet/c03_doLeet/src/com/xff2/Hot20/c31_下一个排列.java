package com.xff2.Hot20;

import java.util.Arrays;

/**
 * @author xff
 * @createTime 2022/6/19 21:07

整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。

例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根
  其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个
  有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，
  那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。

输入：nums = [1,2,3]
输出：[1,3,2]

输入：nums = [3,2,1]
输出：[1,2,3]
 

必须 原地 修改，只允许使用额外常数空间。
 //  思路： 主要是 看作 是一个数字，然后把每个数分在再组合，求出比原数大的 第一个数
 */
public class c31_下一个排列 {

    public static void main(String[] args) {
       //int arr []= {1,2,3,4,6,5};
        int arr []= {1,3,2};
        //int arr []= {4,3,2,1};
         nextPermutation(arr);

    }


    /**
     如何得到这样的排列顺序？
       1. 我们希望下一个数比当前数大  因此只需要将后面的「大数」与前面的「小数」交换，
           就能得到一个更大的数。比如 123456，将 5 和 6 交换就能得到一个更大的数 123465
       2.我们还希望下一个数增加的幅度尽可能的小
           我们需要：
             1.在尽可能靠右的低位进行交换，需要从后向前查找   （后向前）
             2.将一个 尽 可能小的「大数」后面的  与前面的「小数」交换。比如 123465，
                    下一个排列应该把 5 和 4 交换而不是把 6 和 4 交换 123564 --》123546 （交换小的）
             3.将「大数」换到前面后，需要将「大数」后面的所有数重置为升序，升序排列就是最小的排列。
                以 123465 为例：首先按照上一步，交换 5 和 4，得到 123564；然后需要将
                5 之后的数重置为升序，得到 123546。显然 123546 比 123564 更小，
                123546 就是 123465 的下一个排列  （交换后，后面的数 升序排列）

     算法可以描述为：

     1.从后向前查找 第一个相 邻升序的元素对 (i,j)，满足 A[i] < A[j]。此时 [j,end) 必然是降序
     2.在 [j,end) 从后向前查找第一个满足 A[i] < A[k] 的 k。A[i]、A[k] 分别就是上文所说的「小数」「大数」
     3.将 A[i] 与 A[k] 交换
     4.可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序
     5.如果在步骤 1 找不到符合的相邻元素对，说明当前 [begin,end) 为一个降序顺序，则直接跳到步骤 4


     */
    public static void nextPermutation(int[] nums) {
         //由后向前，寻找第一个升序的
        int changeMax =0;  //所找到 递增的  后下标
        int mindex = 0;  //递增的前 下标
        //找个这个数组的 由后向前 找到一个递增的
        for (int i = nums.length-1; i >0 ; i--) {
            if(nums[i-1] <nums[i] ){
                changeMax=i;
                mindex = i-1;
                break;
            }
        }
         //处理特殊情况 ： 本身没有递增的 序列，则直接把后面的反转
        if(changeMax==0){
             //未更新 最大值的下标，证明没找到 递增的 .直接排序即可
            Arrays.sort(nums);
          //  System.out.println(Arrays.toString(nums));
            return;
           }

        //从 后下标 开始，找到一个要交换的数字  nums[k] > nums[mindex]
        for (int i = nums.length-1; i >=changeMax ; i--) {
            if(nums[mindex] < nums[i]){  //找到之后交换，两个数
                int temp = nums[mindex];
                nums[mindex] = nums[i];
                nums[i]=temp;
                break; //找到一个符合 的，交换 跳出 ，不然出错
            }
        }
        //把 递增的后下表 到 结束 的元素 ，设置为 递增顺序  （找到最小的数）
        Arrays.sort(nums, changeMax, nums.length);
           //注意排序 ，直接可以使用， 排序特定下标的
        System.out.println(Arrays.toString(nums));
    }

}
